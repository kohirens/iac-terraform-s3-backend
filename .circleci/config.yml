version: 2.1

orbs:
    vr: kohirens/version-release@4.3.0
    aws-cli: circleci/aws-cli@5.1.2

parameters:
    ctx_ci_cd:
        default: kohirens-automation
        description: Secrets context
        type: string
    ctx_dockerhub:
        default: kohirens-automation-dockerhub
        description: Secrets context
        type: string
    ctx_iac_test:
        default: kohirens-iac-test
        description: Secrets context
        type: string
    ssh_finger:
        description: SSH fingerprint.
        type: string
        default: "SHA256:Qvx4ggu2U7cFb9ZznPsPkbv+XYoCas3vkoUVJ6AxnlE"
    triggered_flow:
        default: "workflow-selector"
        description: Workflow to be executed.
        type: string
    aws_iac_role:
        default: arn:aws:iam::755285156183:role/circleci-terraform-pipelines
        description: CircleCI AWS IAC role.
        type: string

executors:
    terraform-exec:
        docker:
            - image: hashicorp/terraform:1.10.2
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}

commands:
    aws-oidc-setup:
        description: Setup AWS auth using OIDC token
        parameters:
            role_arn:
                type: string
            session_duration:
                default: 900
                type: integer
        steps:
            - run:
                  name: Get AWS credentials
                  command: |
                      set -- $(aws sts assume-role-with-web-identity --role-arn << parameters.role_arn >> --role-session-name "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}" --web-identity-token "${CIRCLE_OIDC_TOKEN}" --duration-seconds << parameters.session_duration >> --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text)
                      aws_key="${1}" && shift
                      aws_secret="${1}" && shift
                      aws_token="${1}" && shift
                      mkdir -p ~/.aws
                      echo '[default]' > ~/.aws/credentials
                      echo "aws_access_key_id=${aws_key}" >> ~/.aws/credentials
                      echo "aws_secret_access_key=${aws_secret}" >> ~/.aws/credentials
                      echo "aws_session_token=${aws_token}" >> ~/.aws/credentials
                      if [ -f ~/.aws/credentials ]; then
                          echo "credentials retrieved"
                          exit 0
                      fi
                      echo "could not retrieve credentials"
                      exit 1
            - run:
                  name: Verify AWS credentials
                  command: |
                      aws sts get-caller-identity

jobs:
    run-test:
        executor: terraform-exec
        environment:
            AWS_DEFAULT_REGION: us-east-1
        steps:
            - checkout
            - run:
                  name: Verify module formatting
                  command: terraform fmt -check -write=false -diff
            - aws-cli/install
            - aws-oidc-setup:
                  role_arn: << pipeline.parameters.aws_iac_role >>
            - run:
                  name: Run terraform test
                  command: |
                      terraform init
                      terraform validate
                      terraform test

workflows:
    quality_checks:
        jobs:
            - run-test:
                  context:
                      - << pipeline.parameters.ctx_dockerhub >>
                  filters: { branches: { ignore: /main|auto-update-changelog/ } }

    workflow-selector:
        when:
            and:
                - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
                - equal: [ main, << pipeline.git.branch >> ]
        jobs:
            - vr/workflow-selector:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-changelog:
        when:
            and:
                - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/publish-changelog:
                  context: << pipeline.parameters.ctx_ci_cd >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-release-tag:
        when:
            and:
                - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/tag-and-release:
                  context: << pipeline.parameters.ctx_ci_cd >>
